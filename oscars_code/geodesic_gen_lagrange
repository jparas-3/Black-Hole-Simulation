from sympy import symbols, diff, sin, cos, simplify, solve
import sympy as sp
from sympy.matrices import Matrix
import scipy.io

# Define symbolic variables
lambda_ = sp.symbols('lambda', real=True)
t, r, theta, phi = sp.symbols('t r theta phi', cls=sp.Function)

# Define derivatives of coordinates with respect to lambda
dt, dr, dtheta, dphi = sp.symbols('dt dr dtheta dphi')
ddt = sp.symbols('ddt')  # second derivative for t

# Metric definition for Kerr spacetime
G = M = c = 1  # Define constants
J = 2
r_s = 2 * G * M / c**2
a = J / (M * c)
sig = r(lambda_)**2 + a**2 * cos(theta(lambda_))**2
del_ = r(lambda_)**2 - r_s * r(lambda_) + a**2

# Define the metric tensor as a matrix
metric = Matrix([[-(1 - (r_s * r(lambda_)) / sig), 0, 0, -(r_s * r(lambda_) * a * sin(theta(lambda_))**2 / sig)],
                 [0, sig / del_, 0, 0],
                 [0, 0, sig, 0],
                 [-(r_s * r(lambda_) * a * sin(theta(lambda_))**2 / sig), 0, 0, (r(lambda_)**2 + a**2 + (r_s * r(lambda_) * a**2 * sin(theta(lambda_))**2 / sig)) * sin(theta(lambda_))**2]])

# Define Lagrangian
vars = Matrix([t(lambda_), r(lambda_), theta(lambda_), phi(lambda_)])
dvars = Matrix([[dt], [dr], [dtheta], [dphi]])
metric_contracted = sp.summation(metric * (dvars.T * dvars), (lambda_, 1, 4))
L = 0.5 * (metric_kerr * dvars).dot(dvars)


# Solve Euler-Lagrange equations and generate geodesics
geodesics = []
for i, var in enumerate(vars):
    # Get the functional derivative component of the Lagrangian
    dL_ddvar = diff(L, dvars[i])
    dL_dvar = diff(L, var(lambda_))

    # Euler-Lagrange equation
    geodesic_eq = diff(dL_ddvar, lambda_) - dL_dvar
    # Solve for the second derivative of coordinate with respect to lambda
    solved_geodesic = solve(geodesic_eq, diff(var(lambda_), lambda_, lambda_))
    geodesics.append(solved_geodesic)

# Output the results (not in a .mat file, just display or process as needed)
for i, geodesic in enumerate(geodesics):
    print(f"Geodesic {i+1}:")
    display(geodesic)

# Saving the geodesic equations if necessary can be done using scipy.io or sympy's own saving mechanisms
# scipy.io.savemat('geodesics_lagrange_Kerr.mat', mdict={'geodesics': geodesics})
